import java.text.SimpleDateFormat

group = 'org.jumpmind.pos'

apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'

def removeSnapshot = { v ->
    if (v.endsWith('-SNAPSHOT')) {
        v = v.substring(0, v.length() - '-SNAPSHOT'.length())
    }
    return v;
}

sourceCompatibility=1.8
targetCompatibility=1.8

tasks.withType(JavaCompile) {
    options.compilerArgs = ['-Xlint:none']
}

ext {
    jnaVersion = '4.1.0'
    springfoxSwaggerVersion='2.9.2'
    javaposVersion='1.14.2'
    slf4jVersion='1.7.25'
    log4jVersion='1.2.17'
    jacksonVersion='2.8.10'
    lombokVersion='1.18.6'
    snakeYamlVersion='1.23'
}

// update jar files with version information
processResources {
    if (project.hasProperty('releaseBuildEnabled') && project.getProperty('releaseBuildEnabled').toBoolean()) {
        version = removeSnapshot(version)
    }
    eachFile { details ->
        if (details.name.endsWith('version.properties')) {
                filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                    'version': version,
                    'buildTime': new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss').format(new java.util.Date()),
                    'gitBranch' : gitBranch,
                    'gitHash' : gitHash,
                    'buildNumber' : buildNumber,
                    'buildName' : buildName
                ])
        }
    }
}


repositories { 
    maven {
        url symmetricMavenUrl 
        jcenter()
        mavenCentral()
    } 
}

jar {
    manifest {
        attributes("Implementation-Title": project.name,
                "Implementation-Version": project.hasProperty('version') && version ? version : '0.0',
                "Project-Artifact": project.name,
                "Build-Version": project.hasProperty('version') && version ? version : '0.0',
                "Build-Time": new SimpleDateFormat("yyyyMMdd-HHmm").format(new Date()))
    }
}

idea {
    module {
        testResourceDirs = []
        testSourceDirs = [ file('src/test/java'), file('src/test/groovy')]
        resourceDirs += file('src/test/resources')
        excludeDirs += file('bin')
        excludeDirs += file('build')
        downloadJavadoc = true
        downloadSources = true
    }
}

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = false
    }

    project {
        resourceFilter {
            appliesTo = 'FILES_AND_FOLDERS'
            type = 'EXCLUDE_ALL'
            matcher {
                id = 'org.eclipse.ui.ide.orFilterMatcher'
                //               matcher {
                //                 id = 'org.eclipse.ui.ide.multiFilter'
                //                 arguments = '1.0-projectRelativePath-matches-false-false-bin'
                //               }
                /*
                matcher {
                    id = 'org.eclipse.ui.ide.multiFilter'
                    arguments = '1.0-projectRelativePath-matches-false-false-build'
                }
                */
                matcher {
                    id = 'org.eclipse.ui.ide.multiFilter'
                    arguments = '1.0-name-matches-false-false-*.class'
                }
                matcher {
                    id = 'org.eclipse.ui.ide.multiFilter'
                    arguments = '1.0-name-matches-false-false-node_modules'
                }
            }
        }        
    }
}

test {
    // ignoreFailures = true
    testLogging.showStandardStreams = true

//     forkEvery = 1
//     maxParallelForks = 5

    //Dynamic exclude through property defined in the build.gradle file
    if (project.hasProperty('excludeTests')) {
        println('Excluding tests: ' + project.property('excludeTests'))
        exclude project.property('excludeTests')
    }
}

task testJar(type: Jar) {
    classifier "test"
    from  sourceSets.test.output+sourceSets.test.allSource
}

task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task extraClean {
    doFirst {
        println 'Removing bin and .settings directories'
        delete './bin'
        delete '.settings'
    }
}

task develop {
    description 'Generates Eclipse artifacts and sets up your development environment'
    dependsOn tasks.cleanEclipse, tasks.eclipse, tasks.cleanIdea, tasks.idea

}

configurations {
    testArtifacts.extendsFrom testRuntime
    deployerJars
}

dependencies {
    deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
    dependencies {
          compile group: 'org.yaml', name: 'snakeyaml', version: snakeYamlVersion
          compileOnly("org.projectlombok:lombok:${lombokVersion}")
          testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
          annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
          testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    }
}

artifacts {
    archives testJar
    archives sourcesJar
    testArtifacts testJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: deployUploadUrl) {
                authentication(userName: deployUser, password: deployPassword)
            }
        }
    }
}

task deploy {
    description 'Shortcut for Maven users'
    if (!gitBranch.equals('merge')) {
        dependsOn tasks.uploadArchives
    }
}

tasks.uploadArchives.dependsOn build
clean.dependsOn extraClean
